const entradaDados from 'readline-sync';

// Classe Aluno
class Aluno { // A classe Aluno √© criada para representar cada aluno dentro do sistema
    constructor() { // m√©todo construtor, para iniciar a fun√ß√£o
        this.nomeAluno = entradaDados.question("\nDigite o nome do(a) Aluno(a): "); // Solicita que o usu√°rio digite o nome do ALuno
        this.matriculaAluno = this.gerarMatricula(); // Chama o m√©todo para gerar matr√≠cula automaticamente
        this.notaAluno = []; // Esta linha inicializa a propriedade notaAluno como um array vazio. Esse array ser√° usado para armazenar refer√™ncias a notas do alunos
        this.disciplinasMatriculadas = []; // Inicializa a propriedade disciplinasMatriculadas como um array vazio. Este array armazenar√° as disciplinas em que o aluno est√° matriculado
    }

    adicionarNota(nota) { // Este √© um m√©todo que permite adicionar uma nota ao array notaAluno
        this.notaAluno.push(nota); // A nota fornecida como argumento √© adicionada ao array notaAluno usando o m√©todo push, permitindo que as notas do aluno sejam acumuladas √† medida que ele √© avaliado nas disciplinas
    }

    calcularMedia() { // Nota Aluno √© um Array
        if (this.notaAluno.length === 0) return 0; // Se o total de nota for igual a zero
        const soma = this.notaAluno.reduce((total, nota) => total + nota, 0); // Este √© um m√©todo de array que executa uma fun√ß√£o fornecida em cada elemento do array (da esquerda para a direita) para reduzir o array a um √∫nico valor (somando os n√∫meros)
        // (total, nota): total √© o acumulador que armazena o valor total at√© aquele ponto, e nota √© o elemento atual do array que est√° sendo processado.
        // total + nota: Esta express√£o soma o valor acumulado (total) com a nota atual (nota)
        return soma / this.notaAluno.length; // A soma total das notas √© dividida pelo n√∫mero de notas. O resultado dessa divis√£o √© a m√©dia das notas
    }

    matricularNaDisciplina(disciplina) { // M√©todo matricularNaDisciplina e a (disciplina √© o par√¢metro)
        if (!disciplina) { // Se o par√¢metro for falso, o c√≥digo do erro ser√° executado
            console.log("Erro: Disciplina inv√°lida.");
            return; // Essa linha encerra a execu√ß√£o da fun√ß√£o, impedindo que o c√≥digo abaixo dela seja executado
        }
        this.disciplinasMatriculadas.push(disciplina); // Se a disciplina √© v√°lida, esta linha adiciona a disciplina ao array disciplinasMatriculadas do aluno (representado por this). Isso significa que o aluno agora est√° matriculado nessa disciplina
        disciplina.matricularAluno(this); // Esta linha chama o m√©todo matricularAluno do objeto disciplina, passando o pr√≥prio aluno como argumento (this). Essa a√ß√£o normalmente indica que a disciplina tamb√©m est√° atualizando seu registro para incluir o novo aluno matriculado
    }

    gerarMatricula() {
        const anoAtual = new Date().getFullYear(); // Obt√©m o ano atual
        const digitosAleatorios = Math.floor(100 + Math.random() * 900); // Gera um n√∫mero aleat√≥rio entre 100 e 999
        return `${anoAtual}${digitosAleatorios}`; // Retorna a matr√≠cula no formato "AAAAAAA"
    }

    gerarBoleto() { // M√©todo gerarBoleto
        const valorMensalidade = 500.00; // Constante com o valor fixo da mensalidade
        const dataVencimento = "10/04/2024"; // Constante com Data fixada
        console.log(`\nüí∞ BOLETO GERADO PARA ${this.nomeAluno}`); // Mensagem na sa√≠da do console indicando que um boleto foi gerado para um aluno espec√≠fico. A propriedade nomeAluno busca o Dado Armazenado com o nome estudante na Fun√ß√£o Aluno
        console.log(`Valor: R$${valorMensalidade.toFixed(2)}`); // Valor da mensalidade √© impresso no console, formatado para dois d√≠gitos decimais, usando o m√©todo toFixed(2)
        console.log(`Vencimento: ${dataVencimento}`); //Esta linha imprime a data de vencimento do boleto na Constante DataVencimento.
        console.log("C√≥digo de barras: 1234.5678.9101.1121\n"); // Simulando o c√≥digo de Barras
    }
}




  

    

  
 

        
      
    
            
         
   
